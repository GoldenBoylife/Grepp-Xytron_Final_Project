#!/usr/bin/env python
# -*- coding: utf-8 -*-


import rospy, rospkg
import numpy as np
from xycar_msgs.msg import xycar_motor
from sensor_msgs.msg import Image
import sys
import os
import signal
import cv2
from cv_bridge import CvBridge
import cv2


def signal_handler(sig, frame):
    os.system('killall -9 python rosout')
    sys.exit(0)




def img_callback(data):
    global image, bridge
    image = bridge.imgmsg_to_cv2(data,"bgr8")

def img_processing(img):
    blur = cv2.GaussianBlur(img,(5,5),0)
    _,L,_ = cv2.split(cv2.cvtColor(blur,cv2.COLOR_BGR2HLS))
    _, gray = cv2.threshold(L,lane_bin_th, 255, cv2.THRESH_BINARY)
    
    kernel = np.ones((1,1),np.uint8)
    dila = cv2.dilate(gray,kernel)
    #dila = cv2.line(dila, (0,255),(640,255), 0)
    #dila = cv2.line(dila, (0,385),(640,385), 0)
    print(np.argmin(dila[255]))
    print(np.argmin(dila[385]))
    
    print(np.argmin(dila[255][::-1]))
    print(np.argmin(dila[385][::-1]))
    return dila

def main():
    global image
    while True:
        while not image.size == (640 * 480 * 3):
            continue
        cv2.imshow('raw', image)
        gray = img_processing(image)
        cv2.imshow('lane', gray)
        if cv2.waitKey(5) & 0xFF == ord('q'):
            break


if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal_handler)
    image = np.empty(shape=[0])
    bridge = CvBridge()
    pub = None
    Width = 640
    Height = 480
    Offset = 280
    Gap = 36
    lane_bin_th = 130
    
    
    rospy.init_node('lane_detect')
    iamge_sub = rospy.Subscriber("/usb_cam/image_raw", Image, img_callback)
    main()
    rospy.spin()

